#!/usr/bin/env node

/**
 * SEO Check Script for MaxMetall
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ SEO –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–π—Ç–∞
 */

const fs = require('fs');
const path = require('path');

console.log('üîç MaxMetall SEO Check Starting...\n');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

const success = (msg) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`);
const error = (msg) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`);
const warning = (msg) => console.log(`${colors.yellow}‚ö†Ô∏è  ${msg}${colors.reset}`);
const info = (msg) => console.log(`${colors.blue}‚ÑπÔ∏è  ${msg}${colors.reset}`);

let score = 0;
let totalChecks = 0;

function checkFile(filePath, description) {
  totalChecks++;
  if (fs.existsSync(filePath)) {
    success(`${description} exists`);
    score++;
    return true;
  } else {
    error(`${description} is missing`);
    return false;
  }
}

function checkFileContent(filePath, searchTerms, description) {
  totalChecks++;
  if (fs.existsSync(filePath)) {
    const content = fs.readFileSync(filePath, 'utf8');
    const foundTerms = searchTerms.filter(term => content.includes(term));

    if (foundTerms.length === searchTerms.length) {
      success(`${description} - all required terms found`);
      score++;
      return true;
    } else {
      const missingTerms = searchTerms.filter(term => !content.includes(term));
      warning(`${description} - missing terms: ${missingTerms.join(', ')}`);
      return false;
    }
  } else {
    error(`${description} - file not found`);
    return false;
  }
}

console.log(`${colors.bold}üìÅ File Structure Check${colors.reset}`);
console.log('='.repeat(50));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
checkFile('public/robots.txt', 'robots.txt');
checkFile('public/sitemap.xml', 'sitemap.xml');
checkFile('public/site.webmanifest', 'site.webmanifest');
checkFile('vercel.json', 'vercel.json');
checkFile('src/utils/seo.js', 'SEO utilities');
checkFile('src/utils/localSEO.js', 'Local SEO utilities');

console.log(`\n${colors.bold}üîç Content SEO Check${colors.reset}`);
console.log('='.repeat(50));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ SEO –∫–æ–Ω—Ç–µ–Ω—Ç–∞
checkFileContent(
  'src/utils/seo.js',
  ['MaxMetall', '–Ω–µ—Ä–∂–∞–≤–µ–π–∫–∞', '–ë–∏—à–∫–µ–∫', 'keywords', 'generateMainPageMeta'],
  'SEO utilities content'
);

checkFileContent(
  'src/app/layout.js',
  ['meta.title', 'meta.description', 'meta.keywords', 'application/ld+json'],
  'Layout SEO meta tags'
);

checkFileContent(
  'public/robots.txt',
  ['User-agent:', 'Allow:', 'Sitemap:', 'https://maxmetall.kg'],
  'robots.txt content'
);

checkFileContent(
  'public/sitemap.xml',
  ['<urlset', '<url>', '<loc>https://maxmetall.kg', '<lastmod>', '<changefreq>'],
  'sitemap.xml structure'
);

console.log(`\n${colors.bold}üè¢ Business Information Check${colors.reset}`);
console.log('='.repeat(50));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
checkFileContent(
  'src/utils/localSEO.js',
  ['+996555918355', '—É–ª. –ß—É–π–∫–æ–≤–∞ 168', '–ë–∏—à–∫–µ–∫', '–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω', 'LocalBusiness'],
  'Business contact information'
);

checkFileContent(
  'src/components/Footer.js',
  ['MaxMetall', '+996555918355', '–Ω–µ—Ä–∂–∞–≤–µ—é—â–µ–π —Å—Ç–∞–ª–∏', '–ë–∏—à–∫–µ–∫'],
  'Footer business information'
);

console.log(`\n${colors.bold}üéØ Keyword Density Check${colors.reset}`);
console.log('='.repeat(50));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
const keywordChecks = [{
    file: 'src/utils/seo.js',
    keywords: ['–Ω–µ—Ä–∂–∞–≤–µ–π–∫–∞', 'MaxMetall', '–ë–∏—à–∫–µ–∫', '–ø–µ—Ä–∏–ª–∞', '–æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è']
  },
  {
    file: 'src/components/Footer.js',
    keywords: ['–Ω–µ—Ä–∂–∞–≤–µ—é—â–µ–π —Å—Ç–∞–ª–∏', '–∏–∑–¥–µ–ª–∏—è', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ']
  },
  {
    file: 'src/app/page.js',
    keywords: ['MaxMetall', '–Ω–µ—Ä–∂–∞–≤–µ—é—â–µ–π —Å—Ç–∞–ª–∏', '–ë–∏—à–∫–µ–∫']
  }
];

keywordChecks.forEach(check => {
  if (fs.existsSync(check.file)) {
    const content = fs.readFileSync(check.file, 'utf8');
    const foundKeywords = check.keywords.filter(keyword => content.includes(keyword));

    totalChecks++;
    if (foundKeywords.length >= check.keywords.length * 0.8) {
      success(`${path.basename(check.file)} - good keyword coverage (${foundKeywords.length}/${check.keywords.length})`);
      score++;
    } else {
      warning(`${path.basename(check.file)} - low keyword coverage (${foundKeywords.length}/${check.keywords.length})`);
    }
  }
});

console.log(`\n${colors.bold}üì± Technical SEO Check${colors.reset}`);
console.log('='.repeat(50));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤
checkFileContent(
  'src/app/layout.js',
  ['viewport', 'charset', 'og:', 'twitter:', 'canonical'],
  'Essential meta tags'
);

checkFileContent(
  'vercel.json',
  ['headers', 'redirects', 'Cache-Control', 'X-Content-Type-Options'],
  'Vercel SEO configuration'
);

checkFileContent(
  'next.config.mjs',
  ['output', 'trailingSlash', 'images'],
  'Next.js SEO configuration'
);

console.log(`\n${colors.bold}üåü SEO Score Summary${colors.reset}`);
console.log('='.repeat(50));

const percentage = Math.round((score / totalChecks) * 100);
const getScoreColor = (score) => {
  if (score >= 90) return colors.green;
  if (score >= 75) return colors.yellow;
  return colors.red;
};

console.log(`${getScoreColor(percentage)}${colors.bold}SEO Score: ${score}/${totalChecks} (${percentage}%)${colors.reset}`);

if (percentage >= 90) {
  console.log(`${colors.green}üéâ Excellent! Your SEO is well optimized.${colors.reset}`);
} else if (percentage >= 75) {
  console.log(`${colors.yellow}üëç Good! There are some areas for improvement.${colors.reset}`);
} else {
  console.log(`${colors.red}‚ö†Ô∏è  Needs work! Several SEO issues need attention.${colors.reset}`);
}

console.log(`\n${colors.bold}üìù SEO Recommendations${colors.reset}`);
console.log('='.repeat(50));

const recommendations = [
  '1. Ensure all meta tags are properly filled',
  '2. Check that structured data is valid (test with Google Rich Results)',
  '3. Verify that all images have proper alt attributes',
  '4. Test site speed with Google PageSpeed Insights',
  '5. Submit sitemap to Google Search Console',
  '6. Monitor Core Web Vitals regularly',
  '7. Check mobile-friendliness with Google Mobile-Friendly Test',
  '8. Verify that all internal links work correctly',
  '9. Test social media sharing with Facebook Debugger',
  '10. Monitor keyword rankings and adjust content accordingly'
];

recommendations.forEach(rec => {
  info(rec);
});

console.log(`\n${colors.bold}üîó Useful Tools${colors.reset}`);
console.log('='.repeat(50));

const tools = [
  'Google Search Console: https://search.google.com/search-console',
  'Google PageSpeed Insights: https://pagespeed.web.dev/',
  'Google Rich Results Test: https://search.google.com/test/rich-results',
  'Facebook Sharing Debugger: https://developers.facebook.com/tools/debug/',
  'Twitter Card Validator: https://cards-dev.twitter.com/validator',
  'Structured Data Testing Tool: https://validator.schema.org/',
  'Mobile-Friendly Test: https://search.google.com/test/mobile-friendly',
  'Lighthouse CI: https://github.com/GoogleChrome/lighthouse-ci'
];

tools.forEach(tool => {
  console.log(`${colors.blue}üîß ${tool}${colors.reset}`);
});

console.log(`\n${colors.green}‚ú® MaxMetall SEO Check Complete!${colors.reset}\n`);

// –í—ã—Ö–æ–¥ —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ score –º–µ–Ω—å—à–µ 75%
process.exit(percentage >= 75 ? 0 : 1);